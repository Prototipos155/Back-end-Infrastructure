if request.method == "POST":
        tokenacceso = session.get('tokenacceso')

        try:
            payload = jwt.decode(tokenacceso, os.getenv("PASSWORD2"), algorithms=['HS256'])

            id_tupla = payload['id_usuario'],
            nombre_usuario = payload['nombre_usuario']

            id_usuario = id_tupla[0]

        except jwt.InvalidTokenError:
            return render_template("biblioteca/peticiones.html", mensaje1 = "Al parece no ha iniciado session")

        TAMAÑO_MAXIMO_ARCHIVOS = 16*1024*1024
        mime_permitidos = ['application/pdf']
        # 'application/msword', 'application/vnd.ms-excel', 'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        # 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.openxmlformats-officedocument.presentationml.presentation'

        mensaje = request.form.get('mensaje')
        link = request.form.get('link')
        archivoblob = request.files['archivo']

        if link.strip() == "" and not archivoblob:
            return render_template ("biblioteca/peticiones.html", mensaje1 = "Debe enviar un link o archivo")
        
        if archivoblob:
            if len(archivoblob.read()) <= TAMAÑO_MAXIMO_ARCHIVOS :
                try:
                    tipoarchivo = filetype.guess(archivoblob)
                    print(f"\n{archivoblob, tipoarchivo.mime, tipoarchivo.extension}\n")

                    if tipoarchivo is None or not (tipoarchivo.mime in mime_permitidos or tipoarchivo.mime.startswith('image')
                            or tipoarchivo.mime.startswith('video')):
                        return render_template ("biblioteca/peticiones.html", mensaje1 = "Sólo archivos PDF, imágenes y videos")
                
                except Exception as err:
                    return render_template ("biblioteca/peticiones.html", mensaje1 = f"Sólo archivos PDF, imágenes y videos")
            
            else:
                return render_template ("biblioteca/peticiones.html", mensaje1 = "No se permiten archivos mayores a 16MB")

        try:
            archivoblob.seek(0)
            nombrearchivo = archivoblob.filename
            archivo = archivoblob.read()

            fecha = datetime.now ().date()
            hora = datetime.now ().time()
            print(id_usuario)
            print(fecha)
            print(hora)

            cbd.cursor.execute("INSERT INTO peticiones (id_usuario, mensaje, archivo, nombre_archivo, link, fecha, hora) VALUES (%s, %s, %s, %s, %s, %s, %s)", (id_usuario, mensaje, archivo, nombrearchivo, link.strip(), fecha, hora))
            cbd.connection.commit()

            return render_template ("inicio.html", mensaje1 = "la peticion se envio correctamente")

        except pymysql.Error as err:
            return render_template("biblioteca/peticiones.html", mensaje1 = f"no se pudo guardar el archivo: {err}")